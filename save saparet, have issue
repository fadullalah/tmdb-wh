import React, { useRef, useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import dayjs from "dayjs";

import ContentWrapper from "../contentWrapper/ContentWrapper";
import Img from "../lazyLoadImage/Img";
import PosterFallback from "../../assets/no-poster.png";
import CircleRating from "../circleRating/CircleRating";
import Genres from "../genres/Genres";

import "./style.scss";

const useBookmarkedItems = () => {
    const [movieBookmarkedItems, setMovieBookmarkedItems] = useState({});
    const [tvShowBookmarkedItems, setTVShowBookmarkedItems] = useState({});

    useEffect(() => {
        const storedMovieBookmarks = JSON.parse(localStorage.getItem("movieBookmarks")) || {};
        setMovieBookmarkedItems(storedMovieBookmarks);

        const storedTVShowBookmarks = JSON.parse(localStorage.getItem("tvShowBookmarks")) || {};
        setTVShowBookmarkedItems(storedTVShowBookmarks);
    }, []);

    return { movieBookmarkedItems, setMovieBookmarkedItems, tvShowBookmarkedItems, setTVShowBookmarkedItems };
};

const Carousel = ({ data, loading, endpoint, title }) => {
    const carouselContainer = useRef();
    const [isDragging, setIsDragging] = useState(false);
    const [startX, setStartX] = useState(null);
    const [scrollLeft, setScrollLeft] = useState(0);
    const { url } = useSelector((state) => state.home);
    const navigate = useNavigate();
    const { movieBookmarkedItems, setMovieBookmarkedItems, tvShowBookmarkedItems, setTVShowBookmarkedItems } = useBookmarkedItems();

    const handleMouseDown = (e) => {
        setIsDragging(true);
        setStartX(e.pageX - carouselContainer.current.offsetLeft);
        setScrollLeft(carouselContainer.current.scrollLeft);
    };

    const handleMouseMove = (e) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = e.pageX - carouselContainer.current.offsetLeft;
        const walk = (x - startX) * 3; // Adjust scrolling speed
        carouselContainer.current.scrollLeft = scrollLeft - walk;
    };

    const handleMouseUp = () => {
        setIsDragging(false);
    };

    const skItem = () => {
        return (
            <div className="skeletonItem">
                <div className="posterBlock skeleton"></div>
                <div className="textBlock">
                    <div className="title skeleton"></div>
                    <div className="date skeleton"></div>
                </div>
            </div>
        );
    };

    const toggleMovieBookmark = (itemId) => {
        const updatedBookmarks = { ...movieBookmarkedItems };
        if (updatedBookmarks[itemId]) {
            delete updatedBookmarks[itemId];
        } else {
            updatedBookmarks[itemId] = true;
        }
        setMovieBookmarkedItems(updatedBookmarks);
        localStorage.setItem("movieBookmarks", JSON.stringify(updatedBookmarks));
    };

    const toggleTVShowBookmark = (itemId) => {
        const updatedBookmarks = { ...tvShowBookmarkedItems };
        if (updatedBookmarks[itemId]) {
            delete updatedBookmarks[itemId];
        } else {
            updatedBookmarks[itemId] = true;
        }
        setTVShowBookmarkedItems(updatedBookmarks);
        localStorage.setItem("tvShowBookmarks", JSON.stringify(updatedBookmarks));
    };

    const isMovieBookmarked = (itemId) => {
        return movieBookmarkedItems[itemId];
    };

    const isTVShowBookmarked = (itemId) => {
        return tvShowBookmarkedItems[itemId];
    };

    return (
        <div className="carousel">
            <ContentWrapper>
                {title && <div className="carouselTitle">{title}</div>}
                <div
                    className="carouselItems"
                    ref={carouselContainer}
                    onMouseDown={handleMouseDown}
                    onMouseMove={handleMouseMove}
                    onMouseUp={handleMouseUp}
                    onMouseLeave={handleMouseUp}
                >
                    {!loading &&
                        data?.map((item) => {
                            const posterUrl = item.poster_path
                                ? url.poster + item.poster_path
                                : PosterFallback;
                            return (
                                <div
                                    key={item.id}
                                    className="carouselItem"
                                    onClick={() =>
                                        navigate(
                                            `/${
                                                item.media_type || endpoint
                                            }/${item.id}`
                                        )
                                    }
                                >
                                    <div className="posterBlock">
                                        <Img src={posterUrl} />
                                        <CircleRating
                                            rating={item.vote_average.toFixed(
                                                1
                                            )}
                                        />
                                        <Genres
                                            data={item.genre_ids.slice(0, 2)}
                                        />
                                        <button
                                            className={`bookmarkButton ${
                                                isMovieBookmarked(item.id) || isTVShowBookmarked(item.id)
                                                    ? "bookmarked"
                                                    : ""
                                            }`}
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                if (item.media_type === 'movie') {
                                                    toggleMovieBookmark(item.id);
                                                } else {
                                                    toggleTVShowBookmark(item.id);
                                                }
                                            }}
                                        >
                                            {isMovieBookmarked(item.id) || isTVShowBookmarked(item.id) ? (
                                                <svg
                                                    width="20"
                                                    height="20"
                                                    viewBox="0 0 15 15"
                                                    fill="none"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                >
                                                    <path
                                                        d="M3.5 2C3.22386 2 3 2.22386 3 2.5V13.5C3 13.6818 3.09864 13.8492 3.25762 13.9373C3.41659 14.0254 3.61087 14.0203 3.765 13.924L7.5 11.5896L11.235 13.924C11.3891 14.0203 11.5834 14.0254 11.7424 13.9373C11.9014 13.8492 12 13.6818 12 13.5V2.5C12 2.22386 11.7761 2 11.5 2H3.5Z"
                                                        fill="currentColor"
                                                        fill-rule="evenodd"
                                                        clip-rule="evenodd"
                                                    />
                                                </svg>
                                            ) : (
                                                <svg
                                                    width="20"
                                                    height="20"
                                                    viewBox="0 0 15 15"
                                                    fill="none"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                >
                                                    <path
                                                        d="M3 2.5C3 2.22386 3.22386 2 3.5 2H11.5C11.7761 2 12 2.22386 12 2.5V13.5C12 13.6818 11.9014 13.8492 11.7424 13.9373C11.5834 14.0254 11.3891 14.0203 11.235 13.924L7.5 11.5896L3.765 13.924C3.61087 14.0203 3.41659 14.0254 3.25762 13.9373C3.09864 13.8492 3 13.6818 3 13.5V2.5ZM4 3V12.5979L6.97 10.7416C7.29427 10.539 7.70573 10.539 8.03 10.7416L11 12.5979V3H4Z"
                                                        fill="currentColor"
                                                        fill-rule="evenodd"
                                                        clip-rule="evenodd"
                                                    />
                                                </svg>
                                            )}
                                        </button>
                                    </div>
                                    <div className="textBlock">
                                        <span className="title">
                                            {item.title || item.name}
                                        </span>
                                        <span className="date">
                                            {dayjs(
                                                item.release_date ||
                                                    item.first_air_date
                                            ).format("MMM D, YYYY")}
                                        </span>
                                    </div>
                                </div>
                            );
                        })}
                </div>
                {loading && (
                    <div className="loadingSkeleton">
                        {skItem()}
                        {skItem()}
                        {skItem()}
                        {skItem()}
                        {skItem()}
                    </div>
                )}
            </ContentWrapper>
        </div>
    );
};

export default Carousel;
...
import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import dayjs from 'dayjs';
import axios from 'axios';
import './Bookmark.scss';
import SwitchTabs from '../../components/switchTabs/SwitchTabs';

const Bookmark = () => {
    const { url } = useSelector((state) => state.home);
    const navigate = useNavigate();
    const [bookmarkItems, setBookmarkItems] = useState([]);
    const [bookmarkType, setBookmarkType] = useState('movie');
    const [movieBookmarks, setMovieBookmarks] = useState({});
    const [tvShowBookmarks, setTVShowBookmarks] = useState({});

    useEffect(() => {
        const storedMovieBookmarks = JSON.parse(localStorage.getItem('movieBookmarks')) || {};
        setMovieBookmarks(storedMovieBookmarks);

        const storedTVShowBookmarks = JSON.parse(localStorage.getItem('tvShowBookmarks')) || {};
        setTVShowBookmarks(storedTVShowBookmarks);
    }, []);

    useEffect(() => {
        const fetchBookmarkDetails = async () => {
            const items = await Promise.all(
                Object.keys(bookmarkType === 'movie' ? movieBookmarks : tvShowBookmarks).map(async (itemId) => {
                    try {
                        const endpoint = bookmarkType === 'movie' ? 'movie' : 'tv';
                        const response = await axios.get(`https://api.themoviedb.org/3/${endpoint}/${itemId}?api_key=b29bfe548cc2a3e4225effbd54ef0fda`);
                        const data = response.data;
                        return {
                            id: itemId,
                            title: data.title || data.name,
                            overview: data.overview,
                            release_date: data.release_date || data.first_air_date,
                            poster_path: data.poster_path,
                            media_type: endpoint
                        };
                    } catch (error) {
                        console.error('Error fetching bookmark details:', error);
                        return null;
                    }
                })
            );
            setBookmarkItems(items.filter(item => item !== null));
        };

        fetchBookmarkDetails();
    }, [bookmarkType, movieBookmarks, tvShowBookmarks]);

    const handleToggle = (newTab) => {
        setBookmarkType(newTab === 'Movies' ? 'movie' : 'tv');
    };

    const toggleBookmark = (itemId) => {
        const updatedBookmarks = { ...movieBookmarks, ...tvShowBookmarks };
        if (updatedBookmarks[itemId]) {
            delete updatedBookmarks[itemId];
        } else {
            updatedBookmarks[itemId] = true;
        }
        if (bookmarkType === 'movie') {
            setMovieBookmarks(updatedBookmarks);
            localStorage.setItem("movieBookmarks", JSON.stringify(updatedBookmarks));
        } else {
            setTVShowBookmarks(updatedBookmarks);
            localStorage.setItem("tvShowBookmarks", JSON.stringify(updatedBookmarks));
        }
    };

    const isBookmarked = (itemId) => {
        const allBookmarks = { ...movieBookmarks, ...tvShowBookmarks };
        return allBookmarks[itemId];
    };

    return (
        <div className="bookmark-container">
            <h2 className="bookmark-heading">Bookmarked Items</h2>
            <SwitchTabs className="switch-tabs" data={['Movies', 'TV Shows']} onTabChange={handleToggle} />
            <ul className="bookmark-list">
                {bookmarkItems.map((item) => (
                    <li key={item.id} className="bookmark-item" onClick={() => navigate(`/${item.media_type}/${item.id}`)}>
                        <div className="bookmark-item-image">
                            {item.poster_path ? (
                                <img src={`${url.poster}${item.poster_path}`} alt={item.title} />
                            ) : (
                                <div className="fallback-poster">No Poster Available</div>
                            )}
                        </div>
                        <div className="bookmark-item-details">
                            <h3 className="bookmark-item-title">{item.title}</h3>
                            <p className="bookmark-item-overview">{item.overview}</p>
                            <p className="bookmark-item-date">{dayjs(item.release_date).format('MMM D, YYYY')}</p>
                            <button
                                className={`bookmarkButton ${isBookmarked(item.id) ? "bookmarked" : ""}`}
                                onClick={(e) => {
                                    e.stopPropagation();
                                    toggleBookmark(item.id);
                                }}
                            >
                                {isBookmarked(item.id) ? (
                                    <svg width="20" height="20" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M3.5 2C3.22386 2 3 2.22386 3 2.5V13.5C3 13.6818 3.09864 13.8492 3.25762 13.9373C3.41659 14.0254 3.61087 14.0203 3.765 13.924L7.5 11.5896L11.235 13.924C11.3891 14.0203 11.5834 14.0254 11.7424 13.9373C11.9014 13.8492 12 13.6818 12 13.5V2.5C12 2.22386 11.7761 2 11.5 2H3.5Z"
                                            fill="currentColor"
                                            fillRule="evenodd"
                                            clipRule="evenodd"
                                        />
                                    </svg>
                                ) : (
                                    <svg width="20" height="20" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M3 2.5C3 2.22386 3.22386 2 3.5 2H11.5C11.7761 2 12 2.22386 12 2.5V13.5C12 13.6818 11.9014 13.8492 11.7424 13.9373C11.5834 14.0254 11.3891 14.0203 11.235 13.924L7.5 11.5896L3.765 13.924C3.61087 14.0203 3.41659 14.0254 3.25762 13.9373C3.09864 13.8492 3 13.6818 3 13.5V2.5ZM4 3V12.5979L6.97 10.7416C7.29427 10.539 7.70573 10.539 8.03 10.7416L11 12.5979V3H4Z"
                                            fill="currentColor"
                                            fillRule="evenodd"
                                            clipRule="evenodd"
                                        />
                                    </svg>
                                )}
                            </button>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Bookmark;
